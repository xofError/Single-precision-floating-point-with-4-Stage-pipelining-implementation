$date
	Sun Jun  8 22:16:38 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_PipelinedFAdd $end
$var wire 1 ! rst $end
$var wire 32 " result [31:0] $end
$var reg 32 # A [31:0] $end
$var reg 32 $ B [31:0] $end
$var reg 1 % clk $end
$var reg 1 & operation $end
$var reg 1 ' reset $end
$scope module dut $end
$var wire 32 ( A [31:0] $end
$var wire 32 ) B [31:0] $end
$var wire 1 % clk $end
$var wire 1 & operation $end
$var wire 1 ! rst $end
$var wire 1 * sum_sign3 $end
$var wire 25 + sum3 [24:0] $end
$var wire 32 , result [31:0] $end
$var wire 8 - exp2 [7:0] $end
$var wire 8 . diff1 [7:0] $end
$var wire 1 / B_sign1_eff $end
$var wire 24 0 B_man2 [23:0] $end
$var wire 24 1 B_man1 [23:0] $end
$var wire 8 2 B_exp1 [7:0] $end
$var wire 1 3 A_sign1 $end
$var wire 24 4 A_man2 [23:0] $end
$var wire 24 5 A_man1 [23:0] $end
$var wire 8 6 A_exp1 [7:0] $end
$var wire 1 7 A_bigger1 $end
$scope module U1 $end
$var wire 32 8 A [31:0] $end
$var wire 32 9 B [31:0] $end
$var wire 1 % clk $end
$var wire 1 & operation $end
$var wire 1 ! rst $end
$var reg 1 7 A_bigger $end
$var reg 8 : A_exp [7:0] $end
$var reg 24 ; A_man [23:0] $end
$var reg 1 3 A_sign $end
$var reg 8 < B_exp [7:0] $end
$var reg 24 = B_man [23:0] $end
$var reg 1 / B_sign_eff $end
$var reg 8 > exp_diff [7:0] $end
$upscope $end
$scope module U2 $end
$var wire 1 7 A_bigger $end
$var wire 8 ? A_exp [7:0] $end
$var wire 24 @ A_man [23:0] $end
$var wire 8 A B_exp [7:0] $end
$var wire 24 B B_man [23:0] $end
$var wire 1 % clk $end
$var wire 8 C exp_diff [7:0] $end
$var wire 1 ! rst $end
$var reg 24 D A_man_aligned [23:0] $end
$var reg 24 E B_man_aligned [23:0] $end
$var reg 8 F exp_out [7:0] $end
$upscope $end
$scope module U3 $end
$var wire 24 G A_man_aligned [23:0] $end
$var wire 1 3 A_sign $end
$var wire 24 H B_man_aligned [23:0] $end
$var wire 1 / B_sign_eff $end
$var wire 1 % clk $end
$var wire 1 ! rst $end
$var reg 25 I sum_man [24:0] $end
$var reg 1 * sum_sign $end
$upscope $end
$scope module U4 $end
$var wire 1 % clk $end
$var wire 8 J exp_in [7:0] $end
$var wire 1 ! rst $end
$var wire 25 K sum_man [24:0] $end
$var wire 1 * sum_sign $end
$var reg 8 L exp_adj [7:0] $end
$var reg 24 M norm_man [23:0] $end
$var reg 32 N result [31:0] $end
$var reg 5 O shift [4:0] $end
$scope function lzc $end
$var reg 24 P v [23:0] $end
$var integer 32 Q i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
x7
bx 6
bx 5
bx 4
x3
bx 2
bx 1
bx 0
x/
bx .
bx -
bx ,
bx +
x*
bx )
bx (
1'
x&
0%
bx $
bx #
bx "
z!
$end
#5000
07
bx00000000000000000000000 "
bx00000000000000000000000 ,
bx00000000000000000000000 N
b0 M
b11000 O
b11111111111111111111111111111111 Q
1%
#10000
0%
0&
b1000001001001000001011010000111 $
b1000001001001000001011010000111 )
b1000001001001000001011010000111 9
b1000001010110100110011001100110 #
b1000001010110100110011001100110 (
b1000001010110100110011001100110 8
0'
#15000
17
b0 .
b0 >
b0 C
b101001000001011010000111 1
b101001000001011010000111 =
b101001000001011010000111 B
b110110100110011001100110 5
b110110100110011001100110 ;
b110110100110011001100110 @
b10000010 2
b10000010 <
b10000010 A
b10000010 6
b10000010 :
b10000010 ?
0/
03
b11111111111111111111111111111111 Q
1%
#20000
0%
#25000
b10000010 -
b10000010 F
b10000010 J
b101001000001011010000111 0
b101001000001011010000111 E
b101001000001011010000111 H
b110110100110011001100110 4
b110110100110011001100110 D
b110110100110011001100110 G
0*
b11111111111111111111111111111111 Q
1%
#30000
0%
#35000
b110101000000000000000000000000 "
b110101000000000000000000000000 ,
b110101000000000000000000000000 N
b1011111100111110011101101 +
b1011111100111110011101101 I
b1011111100111110011101101 K
b1101010 L
b11111111111111111111111111111111 Q
1%
#40000
0%
#45000
b1000001101111110011111001110110 "
b1000001101111110011111001110110 ,
b1000001101111110011111001110110 N
b101111110011111001110110 M
b10000011 L
1%
#50000
0%
#55000
1%
#60000
0%
1&
#65000
1/
1%
#70000
0%
#75000
b1101100100111111011111 +
b1101100100111111011111 I
b1101100100111111011111 K
1%
#80000
0%
#85000
b111101010011111101111100000000 "
b111101010011111101111100000000 ,
b111101010011111101111100000000 N
b10011111101111100000000 M
b1111010 L
b1000 O
b11111111111111111111111111111111 Q
b1101100100111111011111 P
1%
#90000
0%
#95000
b11111111111111111111111111111111 Q
1%
#100000
0%
#105000
b11111111111111111111111111111111 Q
1%
#110000
0%
0&
b11000001010110100110011001100110 #
b11000001010110100110011001100110 (
b11000001010110100110011001100110 8
#115000
0/
13
b11111111111111111111111111111111 Q
1%
#120000
0%
#125000
1*
b11111111111111111111111111111111 Q
1%
#130000
0%
#135000
b10111101010011111101111100000000 "
b10111101010011111101111100000000 ,
b10111101010011111101111100000000 N
b11111111111111111111111111111111 Q
1%
#140000
0%
#145000
b11111111111111111111111111111111 Q
1%
#150000
0%
#155000
b11111111111111111111111111111111 Q
1%
#160000
0%
1&
#165000
1/
b11111111111111111111111111111111 Q
1%
#170000
0%
#175000
b1011111100111110011101101 +
b1011111100111110011101101 I
b1011111100111110011101101 K
b11111111111111111111111111111111 Q
1%
#180000
0%
#185000
b11000001101111110011111001110110 "
b11000001101111110011111001110110 ,
b11000001101111110011111001110110 N
b101111110011111001110110 M
b10000011 L
1%
#190000
0%
#195000
1%
#200000
0%
#205000
1%
#210000
0%
